{
  "name": "wrap-promise",
  "version": "1.0.1",
  "description": "Like new Promise(), but prevents implicit rejection",
  "repository": {
    "type": "git",
    "url": "git://github.com/shinnn/wrap-promise"
  },
  "author": {
    "name": "Shinnosuke Watanabe",
    "url": "https://github.com/shinnn"
  },
  "scripts": {
    "pretest": "eslint --config node_modules/@shinnn/eslintrc/rc.json --ignore-path .gitignore .",
    "test": "node test.js | tap-spec",
    "coverage": "istanbul cover test.js",
    "coveralls": "${npm_package_scripts_coverage} && istanbul-coveralls"
  },
  "license": "MIT",
  "main": "wrap-promise-cjs.js",
  "files": [
    "no-fallback.js",
    "wrap-promise-cjs.js"
  ],
  "keywords": [
    "promise",
    "constructor",
    "then",
    "thenable",
    "throw",
    "error",
    "wrapper",
    "explicit",
    "browser",
    "client-side"
  ],
  "dependencies": {
    "es6-promise": "^2.3.0"
  },
  "devDependencies": {
    "@shinnn/eslintrc": "^1.0.0",
    "eslint": "^0.22.1",
    "istanbul": "^0.3.15",
    "istanbul-coveralls": "^1.0.3",
    "require-uncached": "^1.0.2",
    "tap-spec": "^4.0.0",
    "tape": "^4.0.0"
  },
  "readme": "# wrap-promise\n\n[![NPM version](https://img.shields.io/npm/v/wrap-promise.svg)](https://www.npmjs.com/package/wrap-promise)\n[![Bower version](https://img.shields.io/bower/v/wrap-promise.svg)](https://github.com/shinnn/wrap-promise/releases)\n[![Build Status](https://travis-ci.org/shinnn/wrap-promise.svg?branch=master)](https://travis-ci.org/shinnn/wrap-promise)\n[![Build status](https://ci.appveyor.com/api/projects/status/hs2fbpxk34gbteub?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/wrap-promise)\n[![Coverage Status](https://img.shields.io/coveralls/shinnn/wrap-promise.svg?label=cov)](https://coveralls.io/r/shinnn/wrap-promise)\n[![Dependency Status](https://img.shields.io/david/shinnn/wrap-promise.svg?label=deps)](https://david-dm.org/shinnn/wrap-promise)\n[![devDependency Status](https://img.shields.io/david/dev/shinnn/wrap-promise.svg?label=devDeps)](https://david-dm.org/shinnn/wrap-promise#info=devDependencies)\n\nLike `new Promise()`, but prevents implicit rejection\n\n## Comparison\n\n### Using the native `new Promise()`\n\n```javascript\nconst fs = require('fs');\n\nnew Promise((resolve, reject) => {\n  // Node's fs.readFile throws a type error when the first argument is not a string.\n\n  fs.readFile(123, (err, buf) => { // doesn't throw, but calls `onRejected` function\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(buf);\n  });\n}).catch(() => console.log('This function should be called.'));\n```\n\n### Using *wrap-promise*\n\n```javascript\nconst fs = require('fs');\nconst wrapPromise = require('wrap-promise');\n\nwrapPromise((resolve, reject) => {\n  fs.readFile(123, (err, buf) => { // doesn't call `onRejected` but throws immediately\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(buf);\n  });\n}).catch(() => console.log('This function should not be called.'));\n```\n\n[According to the Promise specification](https://github.com/domenic/promises-unwrapping/blob/2a942729249c2490507a1ae6c9a24f8fa11a98e4/reference-implementation/lib/testable-implementation.js#L293-L297), a `promise` will [be rejected implicitly when an error is thrown in the constructor callback](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-exceptions-and-promises). The only (and the biggest) difference is that *wrap-promise* immediately throws an error in such a case.\n\n## Installation\n\n### Package managers\n\n#### [npm](https://www.npmjs.com/)\n\n```\nnpm install wrap-promise\n```\n\n#### [Bower](http://bower.io/)\n\n```\nbower install wrap-promise\n```\n\n#### [Duo](http://duojs.org/)\n\n```javascript\nconst wrapPromise = require('shinnn/wrap-promise');\n```\n\n### Standalone\n\n[Download the script file directly.](https://raw.githubusercontent.com/shinnn/wrap-promise/master/wrap-promise.js)\n\n## API\n\n### wrapPromise(*fn*)\n\n*fn*: `Function`  \nReturn: `Object` ([Promise](https://promisesaplus.com/))\n\nIt can be used in the same way as `new Promise()` but [`new` operator](http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.2) is not needed.\n\n### wrapPromise.Promise\n\nType: `Function`  \nDefault: global `Promise` or [`require('es6-promise').Promise`](https://github.com/jakearchibald/es6-promise#nodejs)\n\nThe `Promise` constructor used in `wrapPromise` function.\n\n#### On [CommonJS](http://www.commonjs.org/)-based environment (e.g. [Node](https://nodejs.org/))\n\nBy default it uses the global `Promise` constructor if available, otherwise it [`require`](http://nodejs.org/api/globals.html#globals_require)s [es6-promise](https://github.com/jakearchibald/es6-promise) and use its [`Promise` property](https://github.com/jakearchibald/es6-promise#nodejs).\n\nIf you don't need the fallback, use [`no-fallback.js`](https://github.com/shinnn/wrap-promise/blob/master/no-fallback.js) instead. (Useful for [Browserify](http://browserify.org/))\n\n```javascript\nconst wrapPromise = require('wrap-promise/no-fallback');\n```\n\n#### On non-CommonJS environment\n\nIt uses the global `Promise` constructor without any fallbacks. Before using `wrapPromise`, you must load `Promise` polyfill if `Promise` doesn't exist by default.\n\n## License\n\nCopyright (c) 2014 - 2015 [Shinnosuke Watanabe](https://github.com/shinnn)\n\nLicensed under [the MIT License](./LICENSE).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/shinnn/wrap-promise/issues"
  },
  "homepage": "https://github.com/shinnn/wrap-promise",
  "_id": "wrap-promise@1.0.1",
  "dist": {
    "shasum": "561521e9b437bed5a38674064041e8e2076b6c7b"
  },
  "_from": "wrap-promise@^1.0.1",
  "_resolved": "https://registry.npmjs.org/wrap-promise/-/wrap-promise-1.0.1.tgz"
}
